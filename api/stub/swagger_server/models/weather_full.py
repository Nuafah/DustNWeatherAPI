# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WeatherFull(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, ts: str=None, lat: float=None, lon: float=None, temp_c: float=None, feelslike_c: float=None, condition_text: str=None, wind_kph: float=None, wind_dir: str=None, humidity: float=None, cloud: float=None):  # noqa: E501
        """WeatherFull - a model defined in Swagger

        :param id: The id of this WeatherFull.  # noqa: E501
        :type id: int
        :param name: The name of this WeatherFull.  # noqa: E501
        :type name: str
        :param ts: The ts of this WeatherFull.  # noqa: E501
        :type ts: str
        :param lat: The lat of this WeatherFull.  # noqa: E501
        :type lat: float
        :param lon: The lon of this WeatherFull.  # noqa: E501
        :type lon: float
        :param temp_c: The temp_c of this WeatherFull.  # noqa: E501
        :type temp_c: float
        :param feelslike_c: The feelslike_c of this WeatherFull.  # noqa: E501
        :type feelslike_c: float
        :param condition_text: The condition_text of this WeatherFull.  # noqa: E501
        :type condition_text: str
        :param wind_kph: The wind_kph of this WeatherFull.  # noqa: E501
        :type wind_kph: float
        :param wind_dir: The wind_dir of this WeatherFull.  # noqa: E501
        :type wind_dir: str
        :param humidity: The humidity of this WeatherFull.  # noqa: E501
        :type humidity: float
        :param cloud: The cloud of this WeatherFull.  # noqa: E501
        :type cloud: float
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'ts': str,
            'lat': float,
            'lon': float,
            'temp_c': float,
            'feelslike_c': float,
            'condition_text': str,
            'wind_kph': float,
            'wind_dir': str,
            'humidity': float,
            'cloud': float
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'ts': 'ts',
            'lat': 'lat',
            'lon': 'lon',
            'temp_c': 'temp_c',
            'feelslike_c': 'feelslike_c',
            'condition_text': 'condition_text',
            'wind_kph': 'wind_kph',
            'wind_dir': 'wind_dir',
            'humidity': 'humidity',
            'cloud': 'cloud'
        }
        self._id = id
        self._name = name
        self._ts = ts
        self._lat = lat
        self._lon = lon
        self._temp_c = temp_c
        self._feelslike_c = feelslike_c
        self._condition_text = condition_text
        self._wind_kph = wind_kph
        self._wind_dir = wind_dir
        self._humidity = humidity
        self._cloud = cloud

    @classmethod
    def from_dict(cls, dikt) -> 'WeatherFull':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The weatherFull of this WeatherFull.  # noqa: E501
        :rtype: WeatherFull
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this WeatherFull.


        :return: The id of this WeatherFull.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this WeatherFull.


        :param id: The id of this WeatherFull.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this WeatherFull.


        :return: The name of this WeatherFull.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this WeatherFull.


        :param name: The name of this WeatherFull.
        :type name: str
        """

        self._name = name

    @property
    def ts(self) -> str:
        """Gets the ts of this WeatherFull.


        :return: The ts of this WeatherFull.
        :rtype: str
        """
        return self._ts

    @ts.setter
    def ts(self, ts: str):
        """Sets the ts of this WeatherFull.


        :param ts: The ts of this WeatherFull.
        :type ts: str
        """

        self._ts = ts

    @property
    def lat(self) -> float:
        """Gets the lat of this WeatherFull.


        :return: The lat of this WeatherFull.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """Sets the lat of this WeatherFull.


        :param lat: The lat of this WeatherFull.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self) -> float:
        """Gets the lon of this WeatherFull.


        :return: The lon of this WeatherFull.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon: float):
        """Sets the lon of this WeatherFull.


        :param lon: The lon of this WeatherFull.
        :type lon: float
        """

        self._lon = lon

    @property
    def temp_c(self) -> float:
        """Gets the temp_c of this WeatherFull.


        :return: The temp_c of this WeatherFull.
        :rtype: float
        """
        return self._temp_c

    @temp_c.setter
    def temp_c(self, temp_c: float):
        """Sets the temp_c of this WeatherFull.


        :param temp_c: The temp_c of this WeatherFull.
        :type temp_c: float
        """

        self._temp_c = temp_c

    @property
    def feelslike_c(self) -> float:
        """Gets the feelslike_c of this WeatherFull.


        :return: The feelslike_c of this WeatherFull.
        :rtype: float
        """
        return self._feelslike_c

    @feelslike_c.setter
    def feelslike_c(self, feelslike_c: float):
        """Sets the feelslike_c of this WeatherFull.


        :param feelslike_c: The feelslike_c of this WeatherFull.
        :type feelslike_c: float
        """

        self._feelslike_c = feelslike_c

    @property
    def condition_text(self) -> str:
        """Gets the condition_text of this WeatherFull.


        :return: The condition_text of this WeatherFull.
        :rtype: str
        """
        return self._condition_text

    @condition_text.setter
    def condition_text(self, condition_text: str):
        """Sets the condition_text of this WeatherFull.


        :param condition_text: The condition_text of this WeatherFull.
        :type condition_text: str
        """

        self._condition_text = condition_text

    @property
    def wind_kph(self) -> float:
        """Gets the wind_kph of this WeatherFull.


        :return: The wind_kph of this WeatherFull.
        :rtype: float
        """
        return self._wind_kph

    @wind_kph.setter
    def wind_kph(self, wind_kph: float):
        """Sets the wind_kph of this WeatherFull.


        :param wind_kph: The wind_kph of this WeatherFull.
        :type wind_kph: float
        """

        self._wind_kph = wind_kph

    @property
    def wind_dir(self) -> str:
        """Gets the wind_dir of this WeatherFull.


        :return: The wind_dir of this WeatherFull.
        :rtype: str
        """
        return self._wind_dir

    @wind_dir.setter
    def wind_dir(self, wind_dir: str):
        """Sets the wind_dir of this WeatherFull.


        :param wind_dir: The wind_dir of this WeatherFull.
        :type wind_dir: str
        """

        self._wind_dir = wind_dir

    @property
    def humidity(self) -> float:
        """Gets the humidity of this WeatherFull.


        :return: The humidity of this WeatherFull.
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity: float):
        """Sets the humidity of this WeatherFull.


        :param humidity: The humidity of this WeatherFull.
        :type humidity: float
        """

        self._humidity = humidity

    @property
    def cloud(self) -> float:
        """Gets the cloud of this WeatherFull.


        :return: The cloud of this WeatherFull.
        :rtype: float
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud: float):
        """Sets the cloud of this WeatherFull.


        :param cloud: The cloud of this WeatherFull.
        :type cloud: float
        """

        self._cloud = cloud
